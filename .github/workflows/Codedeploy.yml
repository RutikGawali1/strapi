name: Strapi Production Deployment - CodeDeploy

on:
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 607700977843.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY: strapi-app-rutik
  ECS_CLUSTER: task11-strapi-cluster-rutik
  ECS_SERVICE: strapi-service-rutik
  TASK_FAMILY: strapi-task-rutik
  CONTAINER_NAME: rutik-strapi
  CODEDEPLOY_APP_NAME: StrapiCodeDeployApp-rutik
  CODEDEPLOY_DEPLOYMENT_GROUP: StrapiDeployGroup

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SHORT_SHA: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA" >> $GITHUB_ENV

      - name: Fetch Existing Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_FAMILY \
            --query taskDefinition > task-definition.json

      - name: Render Updated Task Definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Register New Task Definition
        id: register-task
        run: |
          TASK_DEF_FILE="${{ steps.render-task.outputs.task-definition }}"
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://$TASK_DEF_FILE \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create AppSpec for CodeDeploy
        run: |
          echo "{
            \"version\": 1,
            \"Resources\": [
              {
                \"TargetService\": {
                  \"Type\": \"AWS::ECS::Service\",
                  \"Properties\": {
                    \"TaskDefinition\": \"${TASK_DEF_ARN}\",
                    \"LoadBalancerInfo\": {
                      \"ContainerName\": \"${{ env.CONTAINER_NAME }}\",
                      \"ContainerPort\": 1337
                    }
                  }
                }
              }
            ]
          }" > appspec.json

      - name: Deploy using CodeDeploy
        run: |
          APPSPEC=$(cat appspec.json | jq -Rs .)
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --cli-input-json "{
              \"applicationName\": \"${{ env.CODEDEPLOY_APP_NAME }}\",
              \"deploymentGroupName\": \"${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}\",
              \"revision\": {
                \"revisionType\": \"AppSpecContent\",
                \"appSpecContent\": {
                  \"content\": $APPSPEC
                }
              }
            }"

      - name: Wait for Deployment to Complete
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name ${{ env.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --query "deployments[0]" \
            --output text)

          echo "Waiting for deployment $DEPLOYMENT_ID to finish..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
